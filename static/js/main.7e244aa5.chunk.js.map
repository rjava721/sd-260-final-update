{"version":3,"sources":["StatusForm.js","Post.js","Comment.js","App.js","index.js"],"names":["StatusForm","props","className","this","currentUser","name","onSubmit","handleFormSubmit","value","formValue","onChange","updateStoredText","placeholder","type","Component","Post","src","userImage","alt","belongsTo","moment","calendar","formContent","likesAmount","commentsAmount","onClick","incrementLikes","id","trackingNumber","createComment","Comment","App","updateCurrentUser","event","userData","state","currentUserTempArray","selectedUser","target","map","user","userName","avatarUrl","setState","console","log","currentInputBoxText","everyUserPosts","preventDefault","push","postId","createPost","postObject","tempArray","forEach","post","index","parseInt","Header","alluserData","ReactDOM","render","document","getElementById"],"mappings":"+OAuCeA,E,YAnCb,WAAYC,GAAQ,qEACZA,I,sEAWN,OACE,yBAAKC,UAAU,cACb,6CACA,8BAAM,4BAAKC,KAAKF,MAAMG,YAAYC,OAElC,0BAAMH,UAAU,aAAaI,SAAUH,KAAKF,MAAMM,kBAChD,8BACAC,MAAOL,KAAKF,MAAMQ,UAClBC,SAAUP,KAAKF,MAAMU,iBACrBC,YAAY,kBACZV,UAAU,oBAEV,2BACAW,KAAK,SACLL,MAAM,OACNN,UAAU,wB,GA5BKY,a,gBCgDVC,E,YA/Cb,WAAYd,GAAQ,qEACZA,I,sEAIN,OACE,6BACE,yBAAKC,UAAU,kBACb,yBAAKA,UAAU,sBACb,yBAAKc,IAAKb,KAAKF,MAAMgB,UAAWC,IAAI,SAEpC,yBAAKhB,UAAU,kBACb,4BAAKC,KAAKF,MAAMG,YAAYe,WAC5B,4BAAKC,MAASC,aAGhB,yBAAKnB,UAAU,gBACb,2BAAIC,KAAKF,MAAMqB,eAInB,yBAAKpB,UAAU,wBACb,2BAAIC,KAAKF,MAAMsB,YAAf,UAAmCpB,KAAKF,MAAMuB,eAA9C,aAQA,4BACAX,KAAK,SACLY,QAAStB,KAAKF,MAAMyB,eACpBC,GAAIxB,KAAKF,MAAM2B,gBAHf,QAMA,4BACAf,KAAK,SACLY,QAAStB,KAAKF,MAAM4B,eAFpB,kB,GArCOf,aCcJgB,E,YAdb,WAAY7B,GAAQ,qEACZA,I,sEAIN,OACE,yBAAKC,UAAU,qBACb,8CACA,2BAAG,mCAAW,0C,GATAY,aCIhBiB,G,iBACJ,WAAa9B,GAAQ,IAAD,8BAClB,4CAAMA,KAgCR+B,kBAAoB,SAACC,GAEnB,IAAIC,EAAW,EAAKC,MAAMD,SACtBE,EAAuB,EAAKD,MAAM/B,YAClCiC,EAAeJ,EAAMK,OAAO9B,MAGhC0B,EAASK,KAAK,SAAAC,GACRH,IAAiBG,EAAKC,WACxBL,EAAqB/B,KAAOgC,EAC5BD,EAAqBT,GAAKa,EAAKb,GAC/BS,EAAqBM,UAAYF,EAAKE,UAEtC,EAAKC,SAAU,CAAEvC,YAAcgC,IAC/BQ,QAAQC,IAAI,EAAKV,MAAM/B,kBA/CT,EAqDpBO,iBAAmB,SAACsB,GAClB,IAAIa,EAAsBb,EAAMK,OAAO9B,MACvC,EAAKmC,SAAS,CAAElC,UAAYqC,KAvDV,EA0DpBvC,iBAAmB,SAAC0B,GAIlB,IAAIc,EAAiB,EAAKZ,MAAMY,eAC5BtC,EAAY,EAAK0B,MAAM1B,UACvBL,EAAc,EAAK+B,MAAM/B,YAG7BwC,QAAQC,IAAI,+BACZZ,EAAMe,iBAGoB,UAArB5C,EAAYC,MACf0C,EAAeE,KAAK,CAClB,UAAcxC,EACd,GAAO,EACP,UAAa,QACb,YAAgB,EAChB,OAAW,EAAK0B,MAAMe,OACtB,eAAmB,EACnB,UAAa,uIAGfN,QAAQC,IAAIE,KAEZA,EAAeE,KAAK,CAClB,UAAcxC,EACd,GAAO,EACP,UAAa,YACb,YAAgB,EAChB,OAAW,EAAK0B,MAAMe,OACtB,eAAmB,EACnB,UAAc,2IAGhBN,QAAQC,IAAI,kBACZD,QAAQC,IAAIE,IAId,EAAKJ,SAAS,CAAElC,UAAW,KAE3BmC,QAAQC,IAAI,8BAAgC,EAAKV,MAAMe,QACvD,EAAKP,SAAS,CAAEO,OAAQ,EAAKf,MAAMe,WACnCN,QAAQC,IAAI,2BAA6B,EAAKV,MAAMe,SAvGlC,EA4GpBC,WAAa,WACX,IAAIJ,EAAiB,EAAKZ,MAAMY,eAC5B3C,EAAc,EAAK+B,MAAM/B,YAE7B,MAAwB,aAArBA,EAAYC,KACN0C,EAAeR,KAAI,SAAAa,GAGxB,OAFAR,QAAQC,IAAI,sCAAwCO,EAAWjC,WAExD,kBAAC,EAAD,CACLf,YAAagD,EACb9B,YAAa8B,EAAW3C,UACxBQ,UAAWmC,EAAWnC,UACtBM,YAAa6B,EAAW7B,YACxBC,eAAgB4B,EAAW5B,eAC3BE,eAAgB,EAAKA,eACrBE,eAAgB,EAAKO,MAAMe,OAC3BrB,cAAe,EAAKA,mBAIF,UAArBzB,EAAYC,KACL0C,EAAeR,KAAI,SAAAa,GACzB,GAAqB,IAAlBA,EAAWzB,GACZ,OAAO,kBAAC,EAAD,CACPvB,YAAagD,EACb9B,YAAa8B,EAAW3C,UACxBQ,UAAWmC,EAAWnC,UACtBM,YAAa6B,EAAW7B,YACxBC,eAAgB4B,EAAW5B,eAC3BE,eAAgB,EAAKA,eACrBE,eAAgB,EAAKO,MAAMe,OAC3BrB,cAAe,EAAKA,mBAIhBkB,EAAeR,KAAI,SAAAa,GACzB,GAAqB,IAAlBA,EAAWzB,GACZ,OAAO,kBAAC,EAAD,CACPvB,YAAagD,EACb9B,YAAa8B,EAAW3C,UACxBQ,UAAWmC,EAAWnC,UACtBM,YAAa6B,EAAW7B,YACxBC,eAAgB4B,EAAW5B,eAC3BE,eAAgB,EAAKA,eACrBE,eAAgB,EAAKO,MAAMe,OAC3BrB,cAAe,EAAKA,oBAzJR,EAgKpBA,cAAgB,WAEd,OADAe,QAAQC,IAAI,2CACL,kBAAC,EAAD,OAlKW,EAqKpBnB,eAAiB,SAACO,GAKhBW,QAAQC,IAAI,gDACZD,QAAQC,IAAIZ,EAAMK,OAAOX,IAEzB,IAAI0B,EAAY,EAAKlB,MAAMY,eAE3BM,EAAUC,SAAS,SAACC,EAAMC,GACpBD,EAAKL,SAAWO,SAASxB,EAAMK,OAAOX,IACxC4B,EAAKhC,cAELqB,QAAQC,IAAI,qBAAuBU,EAAK5B,GAAKM,EAAMK,OAAOX,OAI9D,EAAKgB,SAAS,CAACI,eAAgBM,IAC/BT,QAAQC,IAAI,EAAKV,MAAMY,iBAtLvB,EAAKZ,MAAQ,CACX/B,YAAa,CACXC,KAAM,GACNsB,GAAI,EACJe,UAAW,IAGbR,SAAU,CACR,CACEO,SAAU,WACVd,GAAI,EACJe,UAAW,IAEb,CACED,SAAU,QACVd,GAAI,EACJe,UAAW,sIAEb,CACED,SAAU,YACVd,GAAI,EACJe,UAAW,2IAGfK,eAAgB,GAChBtC,UAAW,GACXyC,OAAQ,GA5BQ,E,sEA4LlB,OACE,yBAAKhD,UAAU,kBACb,kBAAC,EAAD,CACAE,YAAaD,KAAKgC,MAAM/B,YACxB8B,SAAU/B,KAAKgC,MAAMD,SACrBF,kBAAmB7B,KAAK6B,oBAExB,kBAAC,EAAD,CACA5B,YAAaD,KAAKgC,MAAM/B,YACxBG,iBAAkBJ,KAAKI,iBACvBI,iBAAkBR,KAAKQ,iBACvBF,UAAWN,KAAKgC,MAAM1B,YAGtB,kBAAC,EAAD,CACEL,YAAY,QACZkB,YAAY,gBACZL,UAAU,qIACVM,YAAY,IACZC,eAAgB,IAChBE,eAAgBvB,KAAKuB,eACrBE,eAAgBzB,KAAKgC,MAAMe,OAC3BrB,cAAe1B,KAAK0B,gBACpB,kBAAC,EAAD,MACF,kBAAC,EAAD,CACEzB,YAAY,QACZkB,YAAY,gBACZL,UAAU,qIACVM,YAAY,IACZC,eAAgB,IAChBE,eAAgBvB,KAAKuB,eACrBE,eAAgBzB,KAAKgC,MAAMe,OAC3BrB,cAAe1B,KAAK0B,gBACpB,kBAAC,EAAD,MACF,kBAAC,EAAD,CACEzB,YAAY,YACZkB,YAAY,mBACZL,UAAU,yIACVM,YAAY,IACZC,eAAgB,IAChBE,eAAgBvB,KAAKuB,eACrBE,eAAgBzB,KAAKgC,MAAMe,OAC3BrB,cAAe1B,KAAK0B,gBACpB,kBAAC,EAAD,MACF,kBAAC,EAAD,CACEzB,YAAY,YACZkB,YAAY,gBACZL,UAAU,yIACVM,YAAY,IACZC,eAAgB,IAChBE,eAAgBvB,KAAKuB,eACrBE,eAAgBzB,KAAKgC,MAAMe,OAC3BrB,cAAe1B,KAAK0B,gBACpB,kBAAC,EAAD,MACF,kBAAC,EAAD,CACEzB,YAAY,QACZkB,YAAY,gBACZL,UAAU,yIACVM,YAAY,IACZC,eAAgB,IAChBE,eAAgBvB,KAAKuB,eACrBE,eAAgBzB,KAAKgC,MAAMe,OAC3BrB,cAAe1B,KAAK0B,gBACpB,kBAAC,EAAD,MAED1B,KAAKgD,kB,GA9PIrC,cAoQd4C,EAAS,SAACzD,GACZ,IAAI0D,EAAc1D,EAAMiC,SACxB,OACE,yBAAKhC,UAAU,UACb,gDACA,4BACAA,UAAU,mBACVQ,SAAUT,EAAM+B,mBAEf2B,EACApB,KAAI,SAAAC,GACH,OAAO,4BACPhC,MAAOgC,EAAKC,UAAWD,EAAKC,gBAOrBV,ICxRf6B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.7e244aa5.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport App from './App';\r\n\r\nclass StatusForm extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    // we have 2 functions\r\n    // the first one blocks the submit \r\n    // the second one updates the value of the state with the\r\n    // value of the textBox\r\n    // then stores it in array\r\n    // then maps through and then display posts\r\n    // which then clear the box \r\n    return (\r\n      <div className='status-box'>\r\n        <h4>Create a post</h4>\r\n        <span><h4>{this.props.currentUser.name}</h4></span>\r\n\r\n        <form className='input-form' onSubmit={this.props.handleFormSubmit}> \r\n          <textarea \r\n          value={this.props.formValue}  \r\n          onChange={this.props.updateStoredText} \r\n          placeholder='Write a post...' \r\n          className='status-post-box'/>\r\n          \r\n          <input \r\n          type='submit' \r\n          value='Post' \r\n          className='submit-button'>\r\n          </input>\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default StatusForm;","import React, { Component } from 'react';\r\nimport moment from 'moment';// Dhruv suggested me to use this api\r\n\r\nclass Post extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className='post-container'>\r\n          <div className='post-top-container'>\r\n            <img src={this.props.userImage} alt=\"prfl\"/>\r\n\r\n            <div className='post-user-info'>\r\n              <h4>{this.props.currentUser.belongsTo}</h4>\r\n              <h4>{moment().calendar()}</h4>\r\n            </div>\r\n\r\n            <div className='post-top-msg'>\r\n              <p>{this.props.formContent}</p>\r\n            </div>\r\n          </div>\r\n              \r\n          <div className='post-interaction-box'>\r\n            <p>{this.props.likesAmount} Likes {this.props.commentsAmount} Comments</p>\r\n            {/* // when clicking on button\r\n                // increment the amount of likes\r\n                // we can have each post have an id\r\n                // and each like button inside these posts have the same id\r\n                //iterate through state array,\r\n                //if index===button id\r\n                //incrementcounter */}\r\n            <button \r\n            type='button' \r\n            onClick={this.props.incrementLikes} \r\n            id={this.props.trackingNumber}>Like\r\n            </button>\r\n\r\n            <button \r\n            type='button' \r\n            onClick={this.props.createComment}>Comment\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Post;","import React, { Component } from 'react';\r\n\r\nclass Comment extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className='comment-container'> \r\n        <p>Comment content</p>\r\n        <p><a>Like</a><a>Reply</a></p>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Comment;","import React, { Component } from 'react';\nimport StatusForm from './StatusForm';\nimport Post from './Post';\nimport Comment from './Comment';\nimport './App.css';\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n    this.state = {\n      currentUser: {\n        name: '',\n        id: 5,\n        avatarUrl: ''\n      },\n\n      userData: [\n        {\n          userName: 'everyone',// placeholder for selecting every post\n          id: 5,//not necessary\n          avatarUrl: ''// not necessary\n        },\n        {\n          userName: 'jawad',\n          id: 0,\n          avatarUrl: 'https://lh6.googleusercontent.com/proxy/U4Xg7pjLdOi-k39llZrQl4Rry7JDFN3Z1lwuUkXAh_SNbJXwnutlgqGb2jr9nSMttrJKYz-02nG-fQmXW8KB1rwbiA'\n        },\n        {\n          userName: 'Skywalker',\n          id: 1,\n          avatarUrl: 'https://pdpcom.scdn1.secure.raxcdn.com/media/catalog/product/cache/1/image/85e4522595efc69f496374d01ef2bf13/f/r/front_20-_20on_1_1.png'\n        }\n      ],\n      everyUserPosts: [],\n      formValue: '',\n      postId: 0\n    }\n  }\n\n   // Header================================\n  updateCurrentUser = (event) => {\n    {/* inside of header, on change , when the name is selected, grab it with event.name and change state to it */}\n    let userData = this.state.userData;\n    let currentUserTempArray = this.state.currentUser;\n    let selectedUser = event.target.value;\n\n    // now we update state.currentUser with setState\n    userData.map( user => {\n      if (selectedUser === user.userName) {\n        currentUserTempArray.name = selectedUser;\n        currentUserTempArray.id = user.id;\n        currentUserTempArray.avatarUrl = user.avatarUrl;\n\n        this.setState ({ currentUser : currentUserTempArray });\n        console.log(this.state.currentUser);\n      }\n    })\n  }\n\n  // StatusForm=================================\n  updateStoredText = (event) => {\n    let currentInputBoxText = event.target.value;\n    this.setState({ formValue : currentInputBoxText});\n  }\n  \n  handleFormSubmit = (event) => {\n    // grabs the text from box, creates an object with extra details, pushes it inside allUserPosts state array\n    // then empties the input box\n\n    let everyUserPosts = this.state.everyUserPosts;\n    let formValue = this.state.formValue;\n    let currentUser = this.state.currentUser;\n\n    // prevent the page reload\n    console.log('form submit function called');\n    event.preventDefault();\n\n    // take the state array and store the formtextcontnet inside of it.\n    {if (currentUser.name === 'jawad') {\n      everyUserPosts.push({\n        \"formValue\" : formValue,\n        \"id\" : 1,\n        \"belongsTo\": 'jawad',\n        \"likesAmount\" : 0,\n        \"postId\" : this.state.postId, \n        \"commentsAmount\" : 0,\n        \"userImage\": 'https://lh6.googleusercontent.com/proxy/U4Xg7pjLdOi-k39llZrQl4Rry7JDFN3Z1lwuUkXAh_SNbJXwnutlgqGb2jr9nSMttrJKYz-02nG-fQmXW8KB1rwbiA' \n      });\n      \n      console.log(everyUserPosts);\n    } else {\n      everyUserPosts.push({ \n        \"formValue\" : formValue, \n        \"id\" : 2, \n        \"belongsTo\": 'Skywalker', \n        \"likesAmount\" : 0,\n        \"postId\" : this.state.postId, \n        \"commentsAmount\" : 0, \n        \"userImage\" : 'https://pdpcom.scdn1.secure.raxcdn.com/media/catalog/product/cache/1/image/85e4522595efc69f496374d01ef2bf13/f/r/front_20-_20on_1_1.png' \n      });\n\n      console.log('everyUserPosts');\n      console.log(everyUserPosts);\n    }}\n\n    // empty the form input box\n    this.setState({ formValue: '' });\n    \n    console.log('before incrementing postId ' + this.state.postId);\n    this.setState({ postId: this.state.postId++});\n    console.log('just incremented postID ' + this.state.postId)\n\n  }// handleFormSubmit()\n\n  //Renders the post\n  createPost = () => {\n    let everyUserPosts = this.state.everyUserPosts;\n    let currentUser = this.state.currentUser;\n    \n    if(currentUser.name === 'everyone') {\n      return everyUserPosts.map(postObject => { \n        console.log('inside of createpost test everyone ' + postObject.belongsTo);\n        // call a function that updates the postId state\n        return <Post \n          currentUser={postObject} \n          formContent={postObject.formValue} \n          userImage={postObject.userImage}\n          likesAmount={postObject.likesAmount}\n          commentsAmount={postObject.commentsAmount}\n          incrementLikes={this.incrementLikes} \n          trackingNumber={this.state.postId} \n          createComment={this.createComment} />\n        })\n    }\n\n    if(currentUser.name === 'jawad') {\n      return (everyUserPosts.map(postObject => {\n        if(postObject.id === 1) {\n          return <Post \n          currentUser={postObject} \n          formContent={postObject.formValue} \n          userImage={postObject.userImage}\n          likesAmount={postObject.likesAmount}\n          commentsAmount={postObject.commentsAmount}\n          incrementLikes={this.incrementLikes}\n          trackingNumber={this.state.postId}\n          createComment={this.createComment} />\n        }\n      }))\n    } else {\n      return (everyUserPosts.map(postObject => {\n        if(postObject.id === 2) {\n          return <Post \n          currentUser={postObject} \n          formContent={postObject.formValue} \n          userImage={postObject.userImage}\n          likesAmount={postObject.likesAmount}\n          commentsAmount={postObject.commentsAmount}\n          incrementLikes={this.incrementLikes}\n          trackingNumber={this.state.postId}\n          createComment={this.createComment} />\n        }  \n      }))\n    }\n  }\n\n  //Posts================================================\n  createComment = () => {\n    console.log('this function is for creating a comment')\n    return <Comment />;\n  }\n\n  incrementLikes = (event) => {\n\n    // duplicate the state array, \n    // update the duplicated array\n    // set state the state array to the duplicate array\n    console.log('this function is supposed to increment likes');\n    console.log(event.target.id);\n    \n    let tempArray = this.state.everyUserPosts;\n\n    tempArray.forEach( (post, index) => {\n      if (post.postId === parseInt(event.target.id)) {\n        post.likesAmount++;\n      } else {\n        console.log('they do not match ' + post.id + event.target.id);\n      }\n    })\n\n    this.setState({everyUserPosts: tempArray});\n    console.log(this.state.everyUserPosts)\n  }\n\n  render() {\n    return (\n      <div className='main-container'>\n        <Header \n        currentUser={this.state.currentUser} \n        userData={this.state.userData} \n        updateCurrentUser={this.updateCurrentUser}/>\n\n        <StatusForm \n        currentUser={this.state.currentUser} \n        handleFormSubmit={this.handleFormSubmit} \n        updateStoredText={this.updateStoredText} \n        formValue={this.state.formValue} />\n\n        {/* 5 static posts */}\n        <Post \n          currentUser=\"jawad\" \n          formContent=\"static post 1\" \n          userImage=\"https://lh6.googleusercontent.com/proxy/U4Xg7pjLdOi-k39llZrQl4Rry7JDFN3Z1lwuUkXAh_SNbJXwnutlgqGb2jr9nSMttrJKYz-02nG-fQmXW8KB1rwbiA\"\n          likesAmount='5'\n          commentsAmount= '0'\n          incrementLikes={this.incrementLikes} \n          trackingNumber={this.state.postId} \n          createComment={this.createComment} />\n          <Comment />\n        <Post \n          currentUser=\"jawad\" \n          formContent=\"static post 2\" \n          userImage=\"https://lh6.googleusercontent.com/proxy/U4Xg7pjLdOi-k39llZrQl4Rry7JDFN3Z1lwuUkXAh_SNbJXwnutlgqGb2jr9nSMttrJKYz-02nG-fQmXW8KB1rwbiA\"\n          likesAmount='5'\n          commentsAmount= '4'\n          incrementLikes={this.incrementLikes} \n          trackingNumber={this.state.postId} \n          createComment={this.createComment} />\n          <Comment />\n        <Post \n          currentUser=\"Skywalker\" \n          formContent=\"stnpmatic post 3\" \n          userImage=\"https://pdpcom.scdn1.secure.raxcdn.com/media/catalog/product/cache/1/image/85e4522595efc69f496374d01ef2bf13/f/r/front_20-_20on_1_1.png\"\n          likesAmount='5'\n          commentsAmount= '3'\n          incrementLikes={this.incrementLikes} \n          trackingNumber={this.state.postId} \n          createComment={this.createComment} />\n          <Comment />\n        <Post \n          currentUser=\"Skywalker\" \n          formContent=\"static post 4\" \n          userImage=\"https://pdpcom.scdn1.secure.raxcdn.com/media/catalog/product/cache/1/image/85e4522595efc69f496374d01ef2bf13/f/r/front_20-_20on_1_1.png\"\n          likesAmount='6'\n          commentsAmount= '2'\n          incrementLikes={this.incrementLikes} \n          trackingNumber={this.state.postId} \n          createComment={this.createComment} />\n          <Comment />\n        <Post \n          currentUser=\"jawad\" \n          formContent=\"static post 5\" \n          userImage=\"https://pdpcom.scdn1.secure.raxcdn.com/media/catalog/product/cache/1/image/85e4522595efc69f496374d01ef2bf13/f/r/front_20-_20on_1_1.png\"\n          likesAmount='9'\n          commentsAmount= '3'\n          incrementLikes={this.incrementLikes} \n          trackingNumber={this.state.postId} \n          createComment={this.createComment} />\n          <Comment />\n\n        {this.createPost()}\n      </div>  \n    )//return\n  }//render\n}//class\n\nlet Header = (props) => {\n  let alluserData = props.userData;\n  return (\n    <div className='header'>\n      <h2>Social News Feed</h2>\n      <select \n      className='user-select-list' \n      onChange={props.updateCurrentUser}\n      >\n      {alluserData\n      .map(user => { \n        return <option \n        value={user.userName}>{user.userName}</option> \n      })}\n      </select>\n    </div>\n  )\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport './App.css'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}